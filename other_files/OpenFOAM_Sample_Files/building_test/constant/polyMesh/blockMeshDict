/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  2.3.0                                 |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      blockMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

convertToMeters 1;

//find help here http://cfd.direct/openfoam/user-guide/blockmesh/

vertices
(
    (0 0 0) //0
    (10 0 0) //1
    (10 10 0) //2
    (0 10 0) //3
    (0 4 4) //4
    (10 4 4) //5
    (10 6 4) //6
    (0 6 4) //7
    (0 4 6) //8
    (10 4 6) //9
    (10 6 6) //10
    (0 6 6) //11
    (0 0 10) //12
    (10 0 10) //13
    (10 10 10) //14
    (0 10 10) //15
);

blocks
(
    hex /*list of points in block*/(0 1 2 3 4 5 6 7) /*number of mesh divisions to create in each direction*/(10 10 10) /*cell expansion ratio in each direction*/simpleGrading (1 1 1) //bottom block
    hex (0 1 5 4 12 13 9 8) (10 10 10) simpleGrading (1 1 1) 
    hex (4 5 6 7 8 9 10 11) (10 10 10) simpleGrading (1 1 1)
    hex (7 6 2 3 11 10 14 15) (10 10 10) simpleGrading (1 1 1)
    hex (8 9 10 11 12 13 14 15) (10 10 10) simpleGrading (1 1 1)

);

edges
(
);

boundary
(
    floor
    {
        type wall;
        faces
        (
            //list of points on the boundary, normal of these should point outward (if you're standing inside the block, these should be clockwise)
            (0 3 2 1)
        );
    }
    ceiling
    {
        type wall;
        faces
        (
            (12 13 14 15)
        );
    }
    south_wall
    {
        type wall;
        faces
        (
            (0 1 13 12)
        );
    }
    north_wall
    {
        type wall;
        faces
        (
            (15 14 2 3)
        );
    }
    east_wall0
    {
        type wall;
        faces
        (
            (0 4 7 3)
        );
    }
    east_wall1
    {
        type wall;
        faces
        (
            (7 11 15 3)
        );
    }
    east_wall2
    {
        type wall;
        faces
        (
            (8 12 15 11)
        );
    }
    east_wall3
    {
        type wall;
        faces
        (
            (0 12 8 4)
        );
    }
    west_wall0
    {
        type wall;
        faces
        (
            (1 2 6 5)
        );
    }
    west_wall1
    {
        type wall;
        faces
        (
            (6 2 14 10)
        );
    }
    west_wall2
    {
        type wall;
        faces
        (
            (9 10 14 13)
        );
    }
    west_wall3
    {
        type wall;
        faces
        (
            (1 5 9 13)
        );
    }
    east_window
    {
        type patch;
        faces
        (
            (4 8 11 7)
        );
    }
    west_window
    {
        type wall;
        faces
        (
            (5 6 10 9)
        );
    }

);

mergePatchPairs
(
);

// ************************************************************************* //
